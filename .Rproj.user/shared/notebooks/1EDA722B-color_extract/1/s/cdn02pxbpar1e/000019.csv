"0","#""/Users/hputnam/MyProjects/Color_Extract/data/IMG_4263_MU.JPG"""
"0",""
"0","library(imager)"
"0","library(dplyr)"
"0",""
"0","# --- helpers -------------------------------------------------------------"
"0","rgb_to_cmyk <- function(r, g, b) {"
"0","  k <- 1 - pmax(r, g, b)"
"0","  denom <- pmax(1 - k, .Machine$double.eps)"
"0","  c <- (1 - r - k) / denom"
"0","  m <- (1 - g - k) / denom"
"0","  y <- (1 - b - k) / denom"
"0","  cbind(C = c, M = m, Y = y, K = k)"
"0","}"
"0",""
"0","# Convert a 3-channel cimg (sRGB in 0..1) to Lab and return the 3 channels as a list"
"0","rgb_cimg_to_lab_channels <- function(rgb) {"
"0","  W <- width(rgb); H <- height(rgb)"
"0","  ch <- imsplit(rgb, ""c"")        # list of 3 single-channel cim g (R,G,B), all same dims"
"0","  R <- as.numeric(ch[[1]]); G <- as.numeric(ch[[2]]); B <- as.numeric(ch[[3]])"
"0","  lab <- grDevices::convertColor(cbind(R,G,B), from = ""sRGB"", to = ""Lab"")"
"0","  # Split back into three vectors and reshape each with the same x,y"
"0","  L <- as.cimg(lab[,1], x = W, y = H, z = 1, cc = 1)"
"0","  a <- as.cimg(lab[,2], x = W, y = H, z = 1, cc = 1)"
"0","  b <- as.cimg(lab[,3], x = W, y = H, z = 1, cc = 1)"
"0","  list(L = L, a = a, b = b)"
"0","}"
"0",""
"0","compute_stats <- function(rgb, mask) {"
"0","  ch <- imsplit(rgb, ""c"")"
"0","  m  <- as.logical(mask)"
"0",""
"0","  r_vals <- as.numeric(ch[[1]])[m]"
"0","  g_vals <- as.numeric(ch[[2]])[m]"
"0","  b_vals <- as.numeric(ch[[3]])[m]"
"0","  if (!length(r_vals)) stop(""ROI mask empty; adjust parameters."")"
"0",""
"0","  # Mean RGB in [0,1]"
"0","  rgb_mean <- c(R = mean(r_vals), G = mean(g_vals), B = mean(b_vals))"
"0",""
"0","  # HSV via rgb2hsv (expects a 3xN matrix with rows R,G,B)"
"0","  mtx <- matrix(c(rgb_mean[""R""], rgb_mean[""G""], rgb_mean[""B""]),"
"0","                nrow = 3, ncol = 1, byrow = FALSE)"
"0","  hsv_vec <- grDevices::rgb2hsv(mtx)[, 1]  # c(H,S,V) with H in [0,1]"
"0","  names(hsv_vec) <- c(""H"", ""S"", ""V"")"
"0",""
"0","  # CMYK (device-independent formula), average over pixels"
"0","  rgb_to_cmyk <- function(r, g, b) {"
"0","    k <- 1 - pmax(r, g, b)"
"0","    denom <- pmax(1 - k, .Machine$double.eps)"
"0","    c <- (1 - r - k) / denom"
"0","    m <- (1 - g - k) / denom"
"0","    y <- (1 - b - k) / denom"
"0","    cbind(C = c, M = m, Y = y, K = k)"
"0","  }"
"0","  cmyk_mean <- colMeans(rgb_to_cmyk(r_vals, g_vals, b_vals))"
"0",""
"0","  list("
"0","    mean_RGB_0_1  = rgb_mean,"
"0","    mean_HSV_0_1  = hsv_vec,       # H∈[0,1] (×360 for degrees)"
"0","    mean_CMYK_0_1 = cmyk_mean,"
"0","    roi_pixels    = length(r_vals)"
"0","  )"
"0","}"
"0",""
"0",""
"0","# --- main ---------------------------------------------------------------"
"0","extract_centergrown_colors <- function(path,"
"0","                                       use_lab = TRUE,"
"0","                                       center_patch = 21,      # odd size in px"
"0","                                       tol_quantile = 0.90,    # looser = bigger region"
"0","                                       keep_largest_blob = TRUE,"
"0","                                       verbose = TRUE) {"
"0","  vcat <- function(...) if (verbose) cat(...,""\n"")"
"0",""
"0","  vcat(""Loading image..."")"
"0","  img <- load.image(path)"
"0","  if (spectrum(img) < 3) stop(""Image must be RGB/RGBA."")"
"0","  rgb <- if (spectrum(img) == 4) imsub(img, cc %in% 1:3) else img"
"0","  W <- width(rgb); H <- height(rgb)"
"0","  vcat(""Size:"", W, ""x"", H)"
"0",""
"0","  # denoise a bit"
"0","  rgb_smooth <- isoblur(rgb, 1)"
"0",""
"0","  # Choose working color space and get per-channel cim g’s via imsplit()"
"0","  vcat(""Preparing color space..."")"
"0","  if (use_lab) {"
"0","    lab <- rgb_cimg_to_lab_channels(rgb_smooth)  # list L,a,b (each cimg, same dims)"
"0","    ch1 <- lab$L; ch2 <- lab$a; ch3 <- lab$b"
"0","  } else {"
"0","    ch <- imsplit(rgb_smooth, ""c"")               # list R,G,B (each same dims)"
"0","    ch1 <- ch[[1]]; ch2 <- ch[[2]]; ch3 <- ch[[3]]"
"0","  }"
"0",""
"0","  # Seed patch around the exact center"
"0","  cx <- floor(W/2); cy <- floor(H/2)"
"0","  half <- floor(center_patch/2)"
"0","  x1 <- max(1, cx - half); x2 <- min(W, cx + half)"
"0","  y1 <- max(1, cy - half); y2 <- min(H, cy + half)"
"0",""
"0","  seed1 <- imsub(ch1, x %in% x1:x2, y %in% y1:y2)"
"0","  seed2 <- imsub(ch2, x %in% x1:x2, y %in% y1:y2)"
"0","  seed3 <- imsub(ch3, x %in% x1:x2, y %in% y1:y2)"
"0",""
"0","  s1 <- mean(as.numeric(seed1))"
"0","  s2 <- mean(as.numeric(seed2))"
"0","  s3 <- mean(as.numeric(seed3))"
"0",""
"0","  # Per-pixel Euclidean distance in the chosen space"
"0","  # (all three channels are cimg with identical dims, so these ops conform)"
"0","  d1 <- ch1 - s1"
"0","  d2 <- ch2 - s2"
"0","  d3 <- ch3 - s3"
"0","  dist <- sqrt(d1*d1 + d2*d2 + d3*d3)"
"0",""
"0","  # Adaptive threshold from distances inside the seed patch"
"0","  seed_dist <- sqrt((seed1 - s1)*(seed1 - s1) + (seed2 - s2)*(seed2 - s2) + (seed3 - s3)*(seed3 - s3))"
"0","  thr <- as.numeric(quantile(as.numeric(seed_dist), tol_quantile, na.rm = TRUE))"
"0","  vcat(sprintf(""Distance threshold (q=%.2f): %.5f"", tol_quantile, thr))"
"0",""
"0","  mask <- (dist <= thr) * 1  # single-channel cimg (0/1)"
"0",""
"0","  # Optionally keep the largest blob near center"
"0","# Optionally keep the largest blob near center (name-agnostic for the label column)"
"0","if (keep_largest_blob) {"
"0","  labm <- label(mask, high_connectivity = TRUE)"
"0",""
"0","  df <- as.data.frame(labm)"
"0",""
"0","  # Figure out which column holds the label ids (it isn’t always ""value"")"
"0","  label_col <- setdiff(names(df), c(""x"",""y"",""cc"",""z"",""frame""))"
"0","  if (length(label_col) != 1)"
"0","    stop(""Couldn't identify label column in label() dataframe. Found: "","
"0","         paste(setdiff(names(df), c(""x"",""y"",""cc"",""z"",""frame"")), collapse="", ""))"
"0",""
"0","  names(df)[names(df) == label_col] <- ""lbl"""
"0",""
"0","  df <- df %>%"
"0","    dplyr::filter(lbl != 0) %>%"
"0","    dplyr::group_by(lbl) %>%"
"0","    dplyr::summarise("
"0","      area   = dplyr::n(),"
"0","      x_mean = mean(x),"
"0","      y_mean = mean(y),"
"0","      .groups = ""drop"""
"0","    ) %>%"
"0","    dplyr::mutate(dist_center = sqrt((x_mean - W/2)^2 + (y_mean - H/2)^2))"
"0",""
"0","  if (nrow(df)) {"
"0","    chosen <- df %>% dplyr::arrange(dplyr::desc(area), dist_center) %>%"
"0","      dplyr::slice(1) %>% dplyr::pull(lbl)"
"0","    mask <- (labm == chosen) * 1"
"0","  }"
"0","}"
"0",""
"0","  stats <- compute_stats(rgb, mask)"
"0","  list("
"0","    image_size = c(width = W, height = H),"
"0","    params = list(use_lab = use_lab, center_patch = center_patch, tol_quantile = tol_quantile),"
"0","    roi_pixels = stats$roi_pixels,"
"0","    mean_RGB_0_1 = stats$mean_RGB_0_1,"
"0","    mean_HSV_0_1 = stats$mean_HSV_0_1,"
"0","    mean_CMYK_0_1 = stats$mean_CMYK_0_1,"
"0","    roi_mask = mask"
"0","  )"
"0","}"
"0",""
"0",""
